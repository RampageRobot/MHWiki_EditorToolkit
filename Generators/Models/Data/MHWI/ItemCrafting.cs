// <auto-generated />
namespace MediawikiTranslator.Models.Data.MHWI
{
	using System;
	using System.Collections.Generic;

	using System.Globalization;
	using System.Reflection.Metadata.Ecma335;
	using System.Text;
	using Newtonsoft.Json;
	using Newtonsoft.Json.Converters;

	public partial class ItemCrafting
	{
		[JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ItemCraftingParseStringConverter))]
		public long? Id { get; set; }

		[JsonProperty("Unk1", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ItemCraftingParseStringConverter))]
		public long? Unk1 { get; set; }

		[JsonProperty("Mat1Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ItemCraftingParseStringConverter))]
		public long? Mat1Id { get; set; }

		[JsonProperty("Mat1Name", NullValueHandling = NullValueHandling.Ignore)]
		public string Mat1Name { get; set; }

		[JsonProperty("Mat2Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ItemCraftingParseStringConverter))]
		public long? Mat2Id { get; set; }

		[JsonProperty("Mat2Name", NullValueHandling = NullValueHandling.Ignore)]
		public string Mat2Name { get; set; }

		[JsonProperty("ResultId", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ItemCraftingParseStringConverter))]
		public long? ResultId { get; set; }

		[JsonProperty("ResultName", NullValueHandling = NullValueHandling.Ignore)]
		public string ResultName { get; set; }

		[JsonProperty("Qty", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ItemCraftingParseStringConverter))]
		public long? Qty { get; set; }

		[JsonProperty("Unk2", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ItemCraftingParseStringConverter))]
		public long? Unk2 { get; set; }

		[JsonProperty("Category", NullValueHandling = NullValueHandling.Ignore)]
		public Category? Category { get; set; }

		[JsonProperty("CanAutoCraft", NullValueHandling = NullValueHandling.Ignore)]
		public CanAutoCraft? CanAutoCraft { get; set; }
	}

	public enum CanAutoCraft { False, True };

	public enum Category { Ammo, Item, None };
	public partial class ItemCrafting
	{
		public static ItemCrafting[] Fetch() => JsonConvert.DeserializeObject<ItemCrafting[]>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWI\mhwi item crafting.json"), MediawikiTranslator.Models.Data.MHWI.Converter.Settings);
	}

	public static class Serialize
	{
		public static string ToJson(this ItemCrafting[] self) => JsonConvert.SerializeObject(self, Models.Data.MHWI.ItemCraftingConverter.Settings);
	}

	internal static class ItemCraftingConverter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				CanAutoCraftConverter.Singleton,
				CategoryConverter.Singleton,
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}

	internal class CanAutoCraftConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(CanAutoCraft) || t == typeof(CanAutoCraft?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			switch (value)
			{
				case "FALSE":
					return CanAutoCraft.False;
				case "TRUE":
					return CanAutoCraft.True;
			}
			throw new Exception("Cannot unmarshal type CanAutoCraft");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (CanAutoCraft)untypedValue;
			switch (value)
			{
				case CanAutoCraft.False:
					serializer.Serialize(writer, "FALSE");
					return;
				case CanAutoCraft.True:
					serializer.Serialize(writer, "TRUE");
					return;
			}
			throw new Exception("Cannot marshal type CanAutoCraft");
		}

		public static readonly CanAutoCraftConverter Singleton = new CanAutoCraftConverter();
	}

	internal class CategoryConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(Category) || t == typeof(Category?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			switch (value)
			{
				case "Ammo":
					return Category.Ammo;
				case "Item":
					return Category.Item;
				case "None":
					return Category.None;
			}
			throw new Exception("Cannot unmarshal type Category");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (Category)untypedValue;
			switch (value)
			{
				case Category.Ammo:
					serializer.Serialize(writer, "Ammo");
					return;
				case Category.Item:
					serializer.Serialize(writer, "Item");
					return;
				case Category.None:
					serializer.Serialize(writer, "None");
					return;
			}
			throw new Exception("Cannot marshal type Category");
		}

		public static readonly CategoryConverter Singleton = new CategoryConverter();
	}

	internal class ItemCraftingParseStringConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			long l;
			if (Int64.TryParse(value, out l))
			{
				return l;
			}
			throw new Exception("Cannot unmarshal type long");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (long)untypedValue;
			serializer.Serialize(writer, value.ToString());
			return;
		}

		public static readonly ParseStringConverter Singleton = new ParseStringConverter();
	}
}
