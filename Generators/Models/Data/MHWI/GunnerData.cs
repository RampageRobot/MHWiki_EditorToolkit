// <auto-generated />
using System.Globalization;
using System.Text;
using DocumentFormat.OpenXml.Drawing;
using MediawikiTranslator.Models.Weapon;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace MediawikiTranslator.Models.Data.MHWI
{
	public partial class GunnerData
	{
		private static Models.Data.MHWI.Items[] _mhwiItems = Models.Data.MHWI.Items.Fetch();
		[JsonProperty("WeaponType", NullValueHandling = NullValueHandling.Ignore)]
		public string WeaponType { get; set; }

		[JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
		public string Name { get; set; }

		[JsonProperty("Index", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Index { get; set; }

		[JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Id { get; set; }

		[JsonProperty("Unk1", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Unk1 { get; set; }

		[JsonProperty("BaseModelId", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? BaseModelId { get; set; }

		[JsonProperty("Part1Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Part1Id { get; set; }

		[JsonProperty("Part2Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Part2Id { get; set; }

		[JsonProperty("Unk2", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Unk2 { get; set; }

		[JsonProperty("Color", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Color { get; set; }

		[JsonProperty("IsFixedUpgrade", NullValueHandling = NullValueHandling.Ignore)]
		public string IsFixedUpgrade { get; set; }

		[JsonProperty("MuzzleType", NullValueHandling = NullValueHandling.Ignore)]
		public string MuzzleType { get; set; }

		[JsonProperty("BarrelType", NullValueHandling = NullValueHandling.Ignore)]
		public string BarrelType { get; set; }

		[JsonProperty("MagazineType", NullValueHandling = NullValueHandling.Ignore)]
		public string MagazineType { get; set; }

		[JsonProperty("ScopeType", NullValueHandling = NullValueHandling.Ignore)]
		public string ScopeType { get; set; }

		[JsonProperty("Cost", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Cost { get; set; }

		[JsonProperty("Rarity", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Rarity { get; set; }

		[JsonProperty("Damage", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Damage { get; set; }

		[JsonProperty("Defense", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Defense { get; set; }

		[JsonProperty("Affinity", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Affinity { get; set; }

		[JsonProperty("Element", NullValueHandling = NullValueHandling.Ignore)]
		public string Element { get; set; }

		[JsonProperty("ElementDamage", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? ElementDamage { get; set; }

		[JsonProperty("HiddenElement", NullValueHandling = NullValueHandling.Ignore)]
		public string HiddenElement { get; set; }

		[JsonProperty("HiddenElementDamage", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? HiddenElementDamage { get; set; }

		[JsonProperty("Elderseal", NullValueHandling = NullValueHandling.Ignore)]
		public string Elderseal { get; set; }

		[JsonProperty("ShellTypeId", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? ShellTypeId { get; set; }

		[JsonProperty("Unk3", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Unk3 { get; set; }

		[JsonProperty("Deviation", NullValueHandling = NullValueHandling.Ignore)]
		public string Deviation { get; set; }

		[JsonProperty("SlotCount", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? SlotCount { get; set; }

		[JsonProperty("Slot1Size", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Slot1Size { get; set; }

		[JsonProperty("Slot2Size", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Slot2Size { get; set; }

		[JsonProperty("Slot3Size", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Slot3Size { get; set; }

		[JsonProperty("Unk4", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Unk4 { get; set; }

		[JsonProperty("Unk5", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Unk5 { get; set; }

		[JsonProperty("Unk7", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Unk7 { get; set; }

		[JsonProperty("Unk8", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Unk8 { get; set; }

		[JsonProperty("SpecialAmmoType", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? SpecialAmmoType { get; set; }

		[JsonProperty("SpecialAmmoType2", NullValueHandling = NullValueHandling.Ignore)]
		public string SpecialAmmoType2 { get; set; }

		[JsonProperty("TreeId", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? TreeId { get; set; }

		[JsonProperty("TreePosition", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? TreePosition { get; set; }

		[JsonProperty("SkillId", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? SkillId { get; set; }

		[JsonProperty("SkillName", NullValueHandling = NullValueHandling.Ignore)]
		public string SkillName { get; set; }

		[JsonProperty("Unk6", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(GunnerDataParseStringConverter))]
		public long? Unk6 { get; set; }

		[JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
		public string Description { get; set; }

		[JsonIgnore]
		public SharpnessData Sharpness { get; set; }

		public static GunnerData[] GetGunnerData()
		{
			return FromJson(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Raw Data\MHWI\chunk\common\equip\gunnerdata.json"));
		}


		public static WebToolkitData[] GetToolkitData()
		{
			List<WebToolkitData> ret = new List<WebToolkitData>();
			WeaponCraftingData[] craftingData = WeaponCraftingData.GetCraftingData();
			WeaponForgingData[] forgingData = WeaponForgingData.GetForgingData();
			Dictionary<string, ShellTable[]> shellTables = ShellTable.GetShellTables();
			Items[] allItems = Items.Fetch();
			GunnerData[] data = [.. GetGunnerData().Where(x => x.Name != "Unavailable")];
			foreach (GunnerData obj in data)
			{
				WebToolkitData newObj = new WebToolkitData()
				{
					Type = GetWeaponType(obj.WeaponType),
					Affinity = obj.Affinity,
					Attack = obj.Damage!.Value.ToString(),
					Defense = obj.Defense!.Value.ToString(),
					Description = obj.Description,
					Name = obj.Name,
					Elderseal = obj.Elderseal,
					Element1 = obj.HiddenElement != "None" ? "(" + obj.HiddenElement + ")" : obj.Element == "None" ? null : obj.Element,
					ElementDmg1 = obj.HiddenElement != "None" ? "(" + obj.HiddenElementDamage!.Value.ToString() + ")" : obj.ElementDamage == null ? null : obj.ElementDamage!.Value.ToString(),
					Game = "MHWI",
					Rarity = obj.Rarity + 1,
					Tree = GetWeaponTree(obj.TreeId!.Value)
				};
#nullable enable
				WeaponCraftingData? thisCraft = craftingData.FirstOrDefault(x => x.EquipmentId!.Value == obj.Index!.Value && x.EquipmentCategory == obj.WeaponType.Replace(" ", "_"));
				if (obj.TreePosition > 0 && thisCraft != null && thisCraft.Mat1Id > 0)
				{
					WeaponCraftingData? parentCraft = craftingData.FirstOrDefault(x => x.EquipmentCategory == obj.WeaponType.Replace(" ", "_") && (x.ChildIndex1!.Value == thisCraft.Index!.Value || x.ChildIndex2!.Value == thisCraft.Index!.Value || x.ChildIndex3!.Value == thisCraft.Index!.Value || x.ChildIndex4!.Value == thisCraft.Index!.Value));
					GunnerData? parent = data.FirstOrDefault(x => parentCraft != null && x.WeaponType == obj.WeaponType && x.Name == parentCraft.EquipmentName);
					if (parent == null || parentCraft == null)
					{
						WeaponForgingData forge = forgingData.First(x => x.EquipmentIndex!.Value == obj.Index!.Value && x.EquipmentType == obj.WeaponType.Replace(" ", "_"));
						parent = data.FirstOrDefault(x => x.WeaponType == obj.WeaponType && x.Name == forge.EquipmentName);
					}
					newObj.PreviousName = parent!.Name;
					newObj.PreviousRarity = parent!.Rarity;
					newObj.UpgradeCost = obj.Cost;
					newObj.UpgradeMaterials = GetMaterials(parent!, thisCraft, allItems);
				}
#nullable disable
				if (forgingData.Any(x => x.EquipmentIndex!.Value == obj.Index!.Value && x.EquipmentType == obj.WeaponType.Replace(" ", "_")))
				{
					WeaponForgingData forge = forgingData.First(x => x.EquipmentIndex!.Value == obj.Index!.Value && x.EquipmentType == obj.WeaponType.Replace(" ", "_"));
					newObj.ForgeCost = obj.Cost;
					newObj.ForgeMaterials = GetForgeMaterials(obj, forge, allItems);
				}
				if (obj.IsFixedUpgrade == "TRUE")
				{
					newObj.Rollback = "true";
				}
				if (thisCraft != null)
				{
					if (thisCraft.ChildIndex1 > 0)
					{
						WeaponCraftingData childCraft = craftingData.First(x => x.EquipmentCategory == obj.WeaponType.Replace(" ", "_") && x.Index!.Value == thisCraft.ChildIndex1!.Value);
						GunnerData child = data.First(x => x.WeaponType == obj.WeaponType && x.Index!.Value == childCraft.EquipmentId!.Value);
						newObj.Next1Name = child.Name;
						newObj.Next1Rarity = child.Rarity;
						newObj.Next1Cost = obj.Cost;
						newObj.Next1Materials = GetMaterials(child, childCraft, allItems);
					}
					if (thisCraft.ChildIndex2 > 0)
					{
						WeaponCraftingData childCraft = craftingData.First(x => x.EquipmentCategory == obj.WeaponType.Replace(" ", "_") && x.Index!.Value == thisCraft.ChildIndex2!.Value);
						GunnerData child = data.First(x => x.WeaponType == obj.WeaponType && x.Index!.Value == childCraft.EquipmentId!.Value);
						newObj.Next2Name = child.Name;
						newObj.Next2Rarity = child.Rarity;
						newObj.Next2Cost = obj.Cost;
						newObj.Next2Materials = GetMaterials(child, childCraft, allItems);
					}
					if (thisCraft.ChildIndex3 > 0)
					{
						WeaponCraftingData childCraft = craftingData.First(x => x.EquipmentCategory == obj.WeaponType.Replace(" ", "_") && x.Index!.Value == thisCraft.ChildIndex3!.Value);
						GunnerData child = data.First(x => x.WeaponType == obj.WeaponType && x.Index!.Value == childCraft.EquipmentId!.Value);
						newObj.Next3Name = child.Name;
						newObj.Next3Rarity = child.Rarity;
						newObj.Next3Cost = obj.Cost;
						newObj.Next3Materials = GetMaterials(child, childCraft, allItems);
					}
				}
				newObj.Decos1 = (obj.Slot1Size == 1 ? 1 : 0) + (obj.Slot2Size == 1 ? 1 : 0) + (obj.Slot3Size == 1 ? 1 : 0);
				newObj.Decos2 = (obj.Slot1Size == 2 ? 1 : 0) + (obj.Slot2Size == 2 ? 1 : 0) + (obj.Slot3Size == 2 ? 1 : 0);
				newObj.Decos3 = (obj.Slot1Size == 3 ? 1 : 0) + (obj.Slot2Size == 3 ? 1 : 0) + (obj.Slot3Size == 3 ? 1 : 0);
				newObj.Decos4 = (obj.Slot1Size == 4 ? 1 : 0) + (obj.Slot2Size == 4 ? 1 : 0) + (obj.Slot3Size == 4 ? 1 : 0);
				if (newObj.Type == "HBG")
				{
					newObj.HbgSpecialAmmoType = obj.SpecialAmmoType2.Replace("Wyvernfire", "Wyvernheart");
					newObj.HbgDeviation = obj.Deviation;
				}
				else if (newObj.Type == "LBG")
				{
					newObj.LbgSpecialAmmoType = obj.SpecialAmmoType2.Replace("Wyvernfire", "Wyvernheart");
					newObj.LbgDeviation = obj.Deviation == "4" ? "Very High" : obj.Deviation;
				}
				else if (newObj.Type == "Bo")
				{
					newObj.BoCoatings = GetBoCoatings(obj.SpecialAmmoType!.Value);
				}
				newObj.ShellTable = shellTables[obj.ShellTypeId!.Value.ToString()];
				if (newObj.ShellTable != null)
				{
					newObj.ShellTableWikitext = GetShellTableWikitext(newObj);
				}
				if (!ret.Any(x => x.Name == newObj.Name && x.Rarity == newObj.Rarity))
				{
					ret.Add(newObj);
				}
			}
			return [.. ret];
		}

		private static string GetShellTableWikitext(WebToolkitData weapon)
		{
			StringBuilder ret = new();
			foreach (ShellTable shell in weapon.ShellTable.Where(x => x.Capacity > 0 && !x.Name.StartsWith("Unknown")))
			{
				string recoil = shell.RecoilType == "Auto-Reload" || shell.RecoilType == "Wyvern" || shell.RecoilType == "Rapid Fire (Sticky)" ? (shell.RecoilType == "Rapid Fire (Sticky)" ? "Recoil +1" : shell.RecoilType) : shell.RecoilType.Substring(shell.RecoilType.IndexOf("(Recoil") + 1, 9);
				string reload = shell.ReloadSpeed[..shell.ReloadSpeed.IndexOf(" Reload")];
				Models.Data.MHWI.Items shellItem = _mhwiItems.First(x => x.Name == shell.Name);
				string levelText = "";
				if (shellItem.Name.EndsWith("1"))
				{
					levelText = "|TopL=1";
				}
				if (shellItem.Name.EndsWith("2"))
				{
					levelText = "|TopL=2";
				}
				if (shellItem.Name.EndsWith("3"))
				{
					levelText = "|TopL=3";
				}
				ret.AppendLine($"|{{{{IconPickerUniversalAlt|{weapon.Game}|Ammo|{shellItem.Name}|Color={Generators.Weapon.GetColorString(shellItem.WikiIconColor!.Value.ToString())}{levelText}}}}}");
				ret.AppendLine($"|{shell.Capacity}");
				ret.AppendLine($"|{recoil}");
				ret.AppendLine($"|{reload}");
				string icons = "";
				bool movingShotEnabled = false;
				bool movingReloadEnabled = false;
				if (!shell.RecoilType.StartsWith("Cluster") && !recoil.Contains("+3") && !recoil.Contains("+4") && shell.RecoilType != "Wyvern")
				{
					icons += $"{{{{UI|MHRS|{weapon.Type} Moving Shot Enabled|size=24x24px|nolink=true|title=Moving Shot Enabled}}}}";
					movingShotEnabled = true;
				}
				if (reload != "Slow" && reload != "Very Slow")
				{
					if (icons != "")
					{
						icons += " ";
					}
					icons += $"{{{{UI|MHRS|{weapon.Type} Moving Reload Enabled|size=24x24px|nolink=true|title=Moving Reload Enabled}}}}";
					movingReloadEnabled = true;
				}
				if (shell.RecoilType == "Auto-Reload")
				{
					if (!movingShotEnabled)
					{
						if (icons != "")
						{
							icons += " ";
						}
						icons += $"{{{{UI|MHRS|{weapon.Type} Moving Shot Enabled|size=24x24px|nolink=true|title=Moving Shot Enabled}}}}";
					}
					if (!movingReloadEnabled)
					{
						if (icons != "")
						{
							icons += " ";
						}
						icons += $"{{{{UI|MHRS|{weapon.Type} Moving Reload Enabled|size=24x24px|nolink=true|title=Moving Reload Enabled}}}}";
					}
					if (icons != "")
					{
						icons += " ";
					}
					icons += $"{{{{UI|MHRS|{weapon.Type} Single Fire Auto Reload|size=24x24px|nolink=true|title=Single Fire Auto Reload}}}}";
				}
				if (shell.RecoilType.StartsWith("Rapid Fire"))
				{
					if (icons != "")
					{
						icons += " ";
					}
					icons += $"{{{{UI|MHRS|{weapon.Type} Rapid Fire|size=24x24px|nolink=true|title=Rapid Fire}}}}";
				}
				if (shell.RecoilType == "Wyvern")
				{
					if (icons != "")
					{
						icons += " ";
					}
					icons += "[[File:MHWI-Ammo Icon Brown.png|24x24px|link=|Wyvern]]";
				}
				if (shell.RecoilType.StartsWith("Cluster"))
				{
					if (icons != "")
					{
						icons += " ";
					}
					icons += "[[File:MHWI-Ammo Icon Rose.png|24x24px|link=|Cluster]]";
				}
				if (string.IsNullOrEmpty(icons))
				{
					icons = " -";
				}
				ret.AppendLine("|" + icons);
				ret.AppendLine("|-");
			}
			return ret.ToString();
		}

		private static string GetForgeMaterials(GunnerData parent, WeaponForgingData parentCraft, Items[] allItems)
		{
			string upgradeFromMats = "[";
			Tuple<long, long>[] mats = [..new Tuple<long?,long?>[] {
							new Tuple<long?,long?>(parentCraft.Mat1Id, parentCraft.Mat1Count),
							new Tuple<long?,long?>(parentCraft.Mat2Id, parentCraft.Mat2Count),
							new Tuple<long?,long?>(parentCraft.Mat3Id, parentCraft.Mat3Count),
							new Tuple<long?,long?>(parentCraft.Mat4Id, parentCraft.Mat4Count)
						}
						.Where(x => x.Item1.HasValue && x.Item1.Value > 0 && x.Item2.HasValue && x.Item2.Value > 0)
						.Select(x => new Tuple<long,long>(x.Item1!.Value, x.Item2.Value))];
			foreach (Tuple<long, long> matIds in mats)
			{
				Items mat = allItems.First(x => x.Id!.Value == matIds.Item1);
				upgradeFromMats += $"{{\"name\": \"{mat.Name}\", \"icon\": \"{mat.WikiIconName}\", \"color\": \"{mat.WikiIconColor}\", \"quantity\": {matIds.Item2}}},";
			}
			return upgradeFromMats + "]";
		}

		private static string GetMaterials(GunnerData parent, WeaponCraftingData parentCraft, Items[] allItems)
		{
			string upgradeFromMats = "[";
			Tuple<long, long>[] mats = [..new Tuple<long?,long?>[] {
							new Tuple<long?,long?>(parentCraft.Mat1Id, parentCraft.Mat1Count),
							new Tuple<long?,long?>(parentCraft.Mat2Id, parentCraft.Mat2Count),
							new Tuple<long?,long?>(parentCraft.Mat3Id, parentCraft.Mat3Count),
							new Tuple<long?,long?>(parentCraft.Mat4Id, parentCraft.Mat4Count)
						}
						.Where(x => x.Item1.HasValue && x.Item1.Value > 0 && x.Item2.HasValue && x.Item2.Value > 0)
						.Select(x => new Tuple<long,long>(x.Item1!.Value, x.Item2.Value))];
			foreach (Tuple<long, long> matIds in mats)
			{
				Items mat = allItems.First(x => x.Id!.Value == matIds.Item1);
				upgradeFromMats += $"{{\"name\": \"{mat.Name}\", \"icon\": \"{mat.WikiIconName}\", \"color\": \"{mat.WikiIconColor}\", \"quantity\": {matIds.Item2}}},";
			}
			return upgradeFromMats + "]";
		}



		private static string GetBoCoatings(long key)
		{
			return new Dictionary<long, string>()
			{
				{ 0, "Close Range, Power" },
				{ 1, "Close Range, Power" },
				{ 2, "Close Range, Paralysis, Sleep, Blast" },
				{ 3, "Close Range, Sleep+, Blast" },
				{ 4, "Close Range, Power, Poison+" },
				{ 5, "Close Range, Power, Poison" },
				{ 6, "Close Range, Power" },
				{ 7, "Close Range, Power, Poison, Sleep" },
				{ 8, "Close Range, Paralysis, Poison" },
				{ 9, "Close Range, Power, Sleep" },
				{ 10, "Close Range, Power, Paralysis" },
				{ 11, "Close Range, Paralysis, Poison+" },
				{ 12, "Close Range, Power, Blast" },
				{ 13, "Close Range, Power, Paralysis+" },
				{ 14, "Close Range, Paralysis, Sleep" },
				{ 15, "Close Range, Power" },
				{ 16, "Close Range, Power, Poison, Blast" },
				{ 17, "Close Range, Paralysis, Poison, Sleep, Blast" },
				{ 18, "Close Range, Power, Paralysis, Poison, Sleep, Blast" },
				{ 19, "Close Range" },
				{ 20, "Close Range, Power, Poison, Blast" },
				{ 21, "Close Range, Paralysis+, Poison+" },
				{ 22, "Close Range, Blast+" },
				{ 23, "Close Range, Paralysis, Sleep+" },
				{ 24, "Close Range, Power, Sleep+" },
				{ 25, "Close Range, Paralysis+, Blast" },
				{ 26, "Close Range, Power, Paralysis, Poison+" },
				{ 27, "Close Range, Power, Paralysis, Poison+, Sleep" },
				{ 28, "Close Range, Power, Blast+" },
				{ 29, "Close Range, Power, Paralysis, Poison, Blast" },
				{ 30, "Close Range, Power, Poison, Sleep, Blast" },
				{ 31, "Close Range, Power, Paralysis, Sleep, Blast" },
				{ 32, "Close Range, Power, Paralysis, Blast" },
				{ 33, "Close Range, Power, Paralysis+, Poison+, Sleep" }
			}[key];
		}

		private static string GetWeaponTree(long key)
		{
			return new Dictionary<long, string>()
			{
				{ 0, "Unavailable" },
				{ 1, "Ore Tree" },
				{ 2, "Bone Tree" },
				{ 3, "Great Jagras Tree" },
				{ 4, "Vespoid Tree" },
				{ 5, "Kulu-Ya-Ku Tree" },
				{ 6, "Pukei-Pukei Tree" },
				{ 7, "Jyuratodus Tree" },
				{ 8, "Barroth Tree" },
				{ 9, "Tobi-Kadachi Tree" },
				{ 10, "Anjanath Tree" },
				{ 11, "Nergigante Tree" },
				{ 12, "Rathian Tree" },
				{ 13, "Hornetaur Tree" },
				{ 14, "Great Girros Tree" },
				{ 15, "Tzitzi-Ya-Ku Tree" },
				{ 16, "Paolumu Tree" },
				{ 17, "Legiana Tree" },
				{ 18, "Radobaan Tree" },
				{ 19, "Odogaron Tree" },
				{ 20, "Vaal Hazak Tree" },
				{ 21, "Rathalos Tree" },
				{ 22, "Diablos Tree" },
				{ 23, "Kirin Tree" },
				{ 24, "Dodogama Tree" },
				{ 25, "Lavasioth Tree" },
				{ 26, "Uragaan Tree" },
				{ 27, "Pink Rathian Tree" },
				{ 28, "Azure Rathalos Tree" },
				{ 29, "Black Diablos Tree" },
				{ 30, "Teostra Tree" },
				{ 31, "Kushala Daora Tree" },
				{ 32, "Xeno'jiiva Tree" },
				{ 33, "Bazelgeuse Tree" },
				{ 34, "Zorah Magdaros Tree" },
				{ 35, "Dragonbone Tree" },
				{ 36, "Blacksteel Tree" },
				{ 37, "Water Element Tree" },
				{ 38, "Thunder Element Tree" },
				{ 39, "Ice Element Tree" },
				{ 40, "Thunder Element Tree" },
				{ 41, "Water Element Tree" },
				{ 42, "Workshop Weapon Tree" },
				{ 43, "??? Tree" },
				{ 44, "Deviljho Tree" },
				{ 45, "Lunastra Tree" },
				{ 46, "HARDUMMY" },
				{ 47, "Azure Star Tree" },
				{ 48, "Gae Bolg" },
				{ 49, "Dante's Devil Sword" },
				{ 50, "Wyvern Ignition" },
				{ 51, "Lunastra/Nergigante Tree" },
				{ 52, "Lunastra/Xeno'jiiva Tree" },
				{ 53, "Workshop Weapon Tree" },
				{ 54, "Workshop Weapon Tree" },
				{ 55, "The Witcher Tree" },
				{ 56, "Defender Tree" },
				{ 57, "Unavailable" },
				{ 58, "Unavailable" },
				{ 59, "Unavailable" },
				{ 60, "Stygian Zinogre Tree" },
				{ 61, "Banbaro Tree" },
				{ 62, "Nargacuga Tree" },
				{ 63, "Glavenus Tree" },
				{ 64, "Coral Pukei Tree" },
				{ 65, "Velkhana Tree" },
				{ 66, "Tigrex Tree" },
				{ 67, "Fulgur Anjanath Tree" },
				{ 68, "Nightshade Lumu Tree" },
				{ 69, "Brachydios Tree" },
				{ 70, "Shara Ishvalda Tree" },
				{ 71, "Rajang Tree" },
				{ 72, "Alatreon Tree" },
				{ 73, "Yian Garuga Tree" },
				{ 74, "Zinogre Tree" },
				{ 75, "Barioth Tree" },
				{ 76, "Acidic Glavenus Tree" },
				{ 77, "Viper Kadachi Tree" },
				{ 78, "Namielle Tree" },
				{ 79, "Beotodus Tree" },
				{ 80, "Ebony Odogaron Tree" },
				{ 81, "Brute Tigrex Tree" },
				{ 82, "Workshop Weapon Tree" },
				{ 83, "Workshop Weapon Tree" },
				{ 84, "Guild Palace Tree" },
				{ 85, "Furious Rajang Tree" },
				{ 86, "Raging Brachydios Tree" },
				{ 87, "Unavailable" },
				{ 88, "Frostfang Barioth Tree" },
				{ 89, "Fatalis Tree" },
				{ 90, "HARDUMMY" },
				{ 91, "Unavailable" },
				{ 92, "Azure Era Tree" },
				{ 93, "Unavailable" },
				{ 94, "Unavailable" },
				{ 95, "Unavailable" },
				{ 96, "Unavailable" },
				{ 97, "Unavailable" },
				{ 98, "Unavailable" },
				{ 99, "Unavailable" },
				{ 100, "Unavailable" },
				{ 101, "Unavailable" },
				{ 102, "Unavailable" },
				{ 103, "Unavailable" },
				{ 104, "Unavailable" },
				{ 105, "Unavailable" },
				{ 106, "Unavailable" },
				{ 107, "Unavailable" },
				{ 108, "Unavailable" },
				{ 109, "Unavailable" },
				{ 110, "Unavailable" },
				{ 111, "Unavailable" },
				{ 112, "Unavailable" },
				{ 113, "Unavailable" },
				{ 114, "Unavailable" },
				{ 115, "Unavailable" },
				{ 116, "Unavailable" },
				{ 117, "Unavailable" },
				{ 118, "Unavailable" },
				{ 119, "Unavailable" },
				{ 120, "Unavailable" },
				{ 121, "Unavailable" },
				{ 122, "Unavailable" },
				{ 123, "Unavailable" },
				{ 124, "Unavailable" },
				{ 125, "Unavailable" },
				{ 126, "Unavailable" },
				{ 127, "Unavailable" },
				{ 128, "Unavailable" },
				{ 129, "Unavailable" },
				{ 130, "Unavailable" },
				{ 131, "Unavailable" },
				{ 132, "Unavailable" },
				{ 133, "Unavailable" },
				{ 134, "Unavailable" },
				{ 135, "Unavailable" },
				{ 136, "Unavailable" },
				{ 137, "Unavailable" },
				{ 138, "Unavailable" },
				{ 139, "Unavailable" },
				{ 140, "Unavailable" },
				{ 141, "Unavailable" },
				{ 142, "Unavailable" },
				{ 143, "Unavailable" },
				{ 144, "Unavailable" },
				{ 145, "Unavailable" },
				{ 146, "Unavailable" },
				{ 147, "Unavailable" },
				{ 148, "Unavailable" },
				{ 149, "Unavailable" },
				{ 150, "Unavailable" },
			}[key];
		}

		private static string GetWeaponType(string key)
		{
			return new Dictionary<string, string>()
			{
				{ "Charge Blade", "CB" },
				{ "Dual Blades", "DB" },
				{ "Great Sword", "GS" },
				{ "Gunlance", "GL" },
				{ "Hammer", "Hm" },
				{ "Hunting Horn", "HH" },
				{ "Insect Glaive", "IG" },
				{ "Lance", "Ln" },
				{ "Long Sword", "LS" },
				{ "Switch Axe", "SA" },
				{ "Sword and Shield", "SnS" },
				{ "Bow", "Bo" },
				{ "Heavy Bowgun", "HBG" },
				{ "Light Bowgun", "LBG" }
			}[key];
		}
	}

	public partial class GunnerData
	{
		public static GunnerData[] FromJson(string json) => JsonConvert.DeserializeObject<GunnerData[]>(json, MediawikiTranslator.Models.Data.MHWI.GunnerDataConverter.Settings);
	}

	internal static class GunnerDataConverter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}

	internal class GunnerDataParseStringConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			long l;
			if (Int64.TryParse(value, out l))
			{
				return l;
			}
			throw new Exception("Cannot unmarshal type long");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (long)untypedValue;
			serializer.Serialize(writer, value.ToString());
			return;
		}

		public static readonly GunnerDataParseStringConverter Singleton = new GunnerDataParseStringConverter();
	}
}
