// <auto-generated />
using System.Globalization;
using DocumentFormat.OpenXml.Drawing;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace MediawikiTranslator.Models.Data.MHWI
{

	public partial class Decorations
	{
		[JsonProperty("Index", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(DecorationsParseStringConverter))]
		public long? Index { get; set; }

		[JsonProperty("ItemId", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(DecorationsParseStringConverter))]
		public long? ItemId { get; set; }

		[JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
		public string Name { get; set; }

		[JsonProperty("Size", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(DecorationsParseStringConverter))]
		public long? Size { get; set; }

		[JsonProperty("Skill1Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(DecorationsParseStringConverter))]
		public long? Skill1Id { get; set; }

		[JsonProperty("Skill1Name", NullValueHandling = NullValueHandling.Ignore)]
		public string Skill1Name { get; set; }

		[JsonProperty("Skill1Level", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(DecorationsParseStringConverter))]
		public long? Skill1Level { get; set; }

		[JsonProperty("Skill2Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(DecorationsParseStringConverter))]
		public long? Skill2Id { get; set; }

		[JsonProperty("Skill2Name", NullValueHandling = NullValueHandling.Ignore)]
		public string Skill2Name { get; set; }

		[JsonProperty("Skill2Level", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(DecorationsParseStringConverter))]
		public long? Skill2Level { get; set; }

		[JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
		public string Description { get; set; }

		[JsonIgnore]
		public List<SkillDescriptions> Skills { get; set; } = [];

		[JsonIgnore]
		public string WikiIconColor { get; set; }

		[JsonIgnore]
		public Items Item { get; set; }

		[JsonIgnore]
#pragma warning disable CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
		private static Items[]? _items { get; set; }
#pragma warning restore CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.

		public static Decorations[] GetDecorations()
		{
			Dictionary<int, string> wikiIconColors = Generators.Items.GetMHWIWikiColors();
			SkillDescriptions[] allSkills = SkillDescriptions.GetSkillDescriptions();
			SetSkills[] setSkills = SetSkills.GetSetBonusDescriptions();
			Decorations[] decos = FromJson(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Raw Data\MHWI\chunk\common\equip\decorations.json"));
			Items[] items = Items.Fetch();
			foreach (Decorations deco in decos)
			{
				if (deco.Skill1Id != 0)
				{
					if (allSkills.Any(x => x.SkillId == deco.Skill1Id && x.Level == deco.Skill1Level))
					{
						deco.Skills.Add(allSkills.First(x => x.SkillId == deco.Skill1Id && x.Level == deco.Skill1Level));
					}
					else
					{
						SetSkills match = setSkills.First(x => x.SetBonusSkillName == deco.Skill1Name || x.SetBonusName == deco.Skill1Name);
						deco.Skills.Add(new SkillDescriptions()
						{
							SkillId = deco.Skill1Id,
							Level = 1,
							SkillName = match.SetBonusSkillName,
							SkillDescription = match.SetBonusDescription
						});
					}
				}
				if (deco.Skill2Id != 0)
				{
					if (allSkills.Any(x => x.SkillId == deco.Skill2Id && x.Level == deco.Skill2Level))
					{
						deco.Skills.Add(allSkills.First(x => x.SkillId == deco.Skill2Id && x.Level == deco.Skill2Level));
					}
					else
					{
						SetSkills match = setSkills.First(x => x.SetBonusSkillName == deco.Skill2Name || x.SetBonusName == deco.Skill2Name);
						deco.Skills.Add(new SkillDescriptions()
						{
							SkillId = deco.Skill2Id,
							Level = 1,
							SkillName = match.SetBonusSkillName
						});
					}
				}
				deco.Item = items.First(x => x.Id == deco.ItemId);
				deco.WikiIconColor = wikiIconColors[(int)deco.Item.IconColorId!.Value];
			}
			return decos;
		}

		public static long GetRarity(long key)
		{
			if (_items == null)
			{
				_items = Items.Fetch();
			}
			return _items.First(x => x.Id == key).Rarity!.Value;
		}
	}

	public partial class Decorations
	{
		public static Decorations[] FromJson(string json) => JsonConvert.DeserializeObject<Decorations[]>(json, MediawikiTranslator.Models.Data.MHWI.DecorationsConverter.Settings);
	}

	internal static class DecorationsConverter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}

	internal class DecorationsParseStringConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			long l;
			if (Int64.TryParse(value, out l))
			{
				return l;
			}
			throw new Exception("Cannot unmarshal type long");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (long)untypedValue;
			serializer.Serialize(writer, value.ToString());
			return;
		}

		public static readonly DecorationsParseStringConverter Singleton = new DecorationsParseStringConverter();
	}
}
