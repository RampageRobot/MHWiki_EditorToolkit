// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MediawikiTranslator.Models.Data.MHWilds;
//
//    var items = Items.FromJson(jsonString);

namespace MediawikiTranslator.Models.Data.MHWilds
{
	using System;
	using System.Collections.Generic;
	using System.Diagnostics;
	using System.Dynamic;
	using System.Globalization;
	using System.Text.RegularExpressions;
	using DocumentFormat.OpenXml.Drawing.Charts;
	using MediawikiTranslator.Models.MaterialsAndDropTables;
	using MediawikiTranslator.Models.Monsters;
	using Newtonsoft.Json;
	using Newtonsoft.Json.Converters;
	using Newtonsoft.Json.Linq;

	public partial class Items
	{
		[JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
		public string Name { get; set; }
		public string JPName { get; set; }

		[JsonProperty("Rarity", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? Rarity { get; set; }

		[JsonProperty("Category", NullValueHandling = NullValueHandling.Ignore)]
		public string Category { get; set; }

		[JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
		public string Description { get; set; }

		[JsonProperty("Effect", NullValueHandling = NullValueHandling.Ignore)]
		public string Effect { get; set; }

		[JsonProperty("Carry", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? Carry { get; set; }

		[JsonProperty("Ot. Carry", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? OtCarry { get; set; }

		[JsonProperty("Buy Price", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? BuyPrice { get; set; }

		[JsonProperty("Sell Price", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? SellPrice { get; set; }

		[JsonProperty("Icon", NullValueHandling = NullValueHandling.Ignore)]
		public string Icon { get; set; }

		[JsonProperty("Icon Color", NullValueHandling = NullValueHandling.Ignore)]
		public string IconColor { get; set; }

		[JsonProperty("Item ID", NullValueHandling = NullValueHandling.Ignore)]
		public string ItemID { get; set; }

		public List<ItemCrafting> Combinations { get; set; }
		public List<ItemSource> Sources { get; set; } = [];
		public List<ItemEquipment> Equipment { get; set; } = [];
		private static Dictionary<string, Dictionary<string, double[]>> MapAreaPoints = JsonConvert.DeserializeObject<Dictionary<string, Dictionary<string, double[]>>>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\map_area_points.json"));

		public static Items[] FillSources(Items[] items)
		{
			Dictionary<string, List<WebToolkitData>> monsterDrops = Monster.WildsMonsterIds
				.Where(x => !string.IsNullOrEmpty(x.Name) && x.MonsterType == "Large")
				.Select(x => x.Name)
				.Distinct()
				.ToDictionary(x => x, x => Drops.Fetch(x));
			JArray gimmickData = JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\gimmickdata.json"));
			JArray missionRewardData = JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Mission\_UserData\_Reward\MissionRewardData.user.3.json")).First().Value<JObject>("app.user_data.MissionRewardData").Value<JArray>("_Values");
			JArray commonRewardData = JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Mission\_UserData\_Reward\CommonRewardData.user.3.json")).First().Value<JObject>("app.user_data.QuestGeneralRewardData").Value<JArray>("_Values");
			JArray questRewardSetting = JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Mission\_UserData\_Reward\QuestRewardSetting.user.3.json")).First().Value<JObject>("app.user_data.QuestRewardSetting").Value<JArray>("_Values");
			JArray questResultData = JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\GUI\GUI070000\GUI070001\QuestResultData.user.3.json")).First().Value<JObject>("app.user_data.QuestResultData").Value<JArray>("_QuestResultItems");
			Dictionary<string, Tuple<Items, int, int>[]> questRewards = [];
			foreach (DirectoryInfo folder in Directory.EnumerateDirectories(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Mission").Select(x => new DirectoryInfo(x)).Where(x => x.Name.StartsWith("Mission")))
			{
				string missionName = "";
				List<Tuple<Items, int, int>> rewards = [];
				int commonTableId = 0;
				foreach (JObject questReward in questRewardSetting)
				{
					JObject reward = questReward.Value<JObject>("app.user_data.QuestRewardSetting.cData");
					string rewardMissionId = reward.Value<JObject>("_missionID").Value<JObject>("app.MissionIDList.ID_Serializable").Value<string>("_Value");
					if (rewardMissionId.Substring(rewardMissionId.IndexOf("_") + 1) == folder.Name.Replace("Mission", ""))
					{
						if (string.IsNullOrEmpty(missionName))
						{
							missionName = JsonConvert.DeserializeObject<JObject>(File.ReadAllText($@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Text\Mission\{rewardMissionId.Substring(rewardMissionId.IndexOf("]") + 1).Replace("_", "")}.msg.23.json")).Value<JArray>("entries").Select(x => x.Value<JArray>("content")[1].ToObject<string>()).First();
						}
						commonTableId = reward.Value<int>("_commonRewardTableId");
					}
				}
				if (commonTableId != 0)
				{
					foreach (JObject commonReward in commonRewardData)
					{
						JObject reward = commonReward.Value<JObject>("app.user_data.QuestGeneralRewardData.cData");
						string itemId = reward.Value<JObject>("_itemId").Value<JObject>("app.ItemDef.ID_Serializable").Value<string>("_Value");
						if (reward.Value<int>("_tableId") == commonTableId && itemId != "[0]INVALID" && itemId != "[1]NONE")
						{
							rewards.Add(new Tuple<Items, int, int>(
								items.First(x => x.ItemID == itemId),
								reward.Value<int>("_num"),
								reward.Value<int>("_probability")
							));
						}
					}
				}
				JToken missionObjMaybe = missionRewardData.FirstOrDefault(x =>
				{
					string tempMissionId = x.Value<JObject>("app.user_data.MissionRewardData.cData").Value<JObject>("_MissonId").Value<JObject>("app.MissionIDList.ID_Serializable").Value<string>("_Value");
					return tempMissionId.Substring(tempMissionId.IndexOf("_") + 1) == folder.Name.Replace("Mission", "");
				});
				if (missionObjMaybe != null)
				{
					JObject mission = missionObjMaybe.Value<JObject>("app.user_data.MissionRewardData.cData");
					string missionId = mission.Value<JObject>("_MissonId").Value<JObject>("app.MissionIDList.ID_Serializable").Value<string>("_Value");
					if (string.IsNullOrEmpty(missionName))
					{
						missionName = JsonConvert.DeserializeObject<JObject>(File.ReadAllText($@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Text\Mission\{missionId.Substring(missionId.IndexOf("]") + 1).Replace("_", "")}.msg.23.json")).Value<JArray>("entries").Select(x => x.Value<JArray>("content")[1].ToObject<string>()).First();
					}
					int index = 0;
					foreach (JObject questItem in mission.Value<JArray>("_ItemId"))
					{
						string itemId = questItem.Value<JObject>("app.ItemDef.ID_Serializable").Value<string>("_Value");
						if (itemId != "[0]INVALID")
						{
							rewards.Add(new Tuple<Items, int, int>(
								items.First(x => x.ItemID == itemId),
								mission.Value<JArray>("_ItemNum")[index].ToObject<int>(),
								100
							));
						}
						index++;
					}
				}
				JToken[] resultMissions = [..questResultData.Where(x =>
				{
					string resultMission = x.Value<JObject>("app.user_data.QuestResultData.ItemData").Value<JObject>("_MissionID").Value<JObject>("app.MissionIDList.ID_Serializable").Value<string>("_Value");
					return resultMission.Substring(resultMission.IndexOf("_") + 1) == folder.Name.Replace("Mission", "");
				})];
				if (resultMissions.Length > 0)
				{
					foreach (JToken mission in resultMissions)
					{
						string itemId = mission.Value<JObject>("app.user_data.QuestResultData.ItemData").Value<JObject>("_ItemID").Value<JObject>("app.ItemDef.ID_Serializable").Value<string>("_Value");
						if (itemId != "[0]INVALID")
						{
							rewards.Add(new Tuple<Items, int, int>(
								items.First(x => x.ItemID == itemId),
								1,
								100
							));
						}
					}
				}
				if (!string.IsNullOrEmpty(missionName))
				{
					if (!questRewards.ContainsKey(missionName))
					{
						questRewards.Add(missionName, [.. rewards]);
					}
				}
			}
			MHWilds.Weapon[] allWeapons = MHWilds.Weapon.GetAllWeapons();
			MHWilds.Armor allArmor = MHWilds.Armor.GetArmors()[0];
			JArray craftingItems = JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Common\Item\ItemRecipe.user.3.json")).First().Value<JObject>("app.user_data.cItemRecipe").Value<JArray>("_Values");
			JObject[] itemData = JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Common\Item\itemData.user.3.json")).First().Value<JObject>("app.user_data.ItemData").Value<JArray>("_Values").Select(x => x.Value<JObject>("app.user_data.ItemData.cData")).ToArray();
			JArray itemMsgs = JsonConvert.DeserializeObject<JObject>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Text\Excel_Data\Item.msg.23.json")).Value<JArray>("entries");
			JArray armorRecipes = JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Common\Equip\ArmorRecipeData.user.3.json")).First().Value<JObject>("app.user_data.ArmorRecipeData").Value<JArray>("_Values");
			Dictionary<string, string> stageDict = new Dictionary<string, string>()
			{
				{ "ST101", "Windward Plains" },
				{ "ST102", "Scarlet Forest" },
				{ "ST103", "Oilwell Basin" },
				{ "ST104", "Iceshard Cliffs" },
				{ "ST105", "Ruins of Wyveria" }
			};
			foreach (Items item in items)
			{
				string itemId = item.ItemID.Substring(item.ItemID.IndexOf("]") + 1);
				Dictionary<string, JObject[]> stageMatches = new();
				foreach (string stage in stageDict.Keys)
				{
					JObject[] stageMatch = gimmickData.Where(x => x.Value<JArray>(stage) != null && x.Value<JArray>(stage).Any(y => y.Value<JArray>("items") != null && y.Value<JArray>("items").Any(z => z.ToString() == itemId))).Select(x => x.ToObject<JObject>()).ToArray();
					if (stageMatch.Length > 0)
					{
						stageMatches.Add(stage, stageMatch);
					}
				}
				foreach (KeyValuePair<string, JObject[]> stageMatch in stageMatches)
				{
					foreach (JObject match in stageMatch.Value)
					{
						foreach (double[] point in match.Value<JArray>("points").Select(x => x.ToObject<double[]>()))
						{
							string lastStageZone = "";
							double[] lastPointMatch = [];
							double lastDistance = 10000000;
							foreach (KeyValuePair<string, Dictionary<string, double[]>> points in MapAreaPoints)
							{
								foreach (KeyValuePair<string, double[]> pt in points.Value)
								{
									double distance = MeasureDistance(point, pt.Value);
									if (distance < lastDistance)
									{
										lastStageZone = pt.Key;
										lastPointMatch = pt.Value;
										lastDistance = distance;
									}
								}
							}
							JToken invalid = match.Value<JArray>(stageMatch.Key).First();
							item.Sources.Add(new ItemSource()
							{
								Stage = stageDict[lastStageZone.Substring(0, lastStageZone.IndexOf("_")).ToUpper()],
								Zone = Convert.ToInt32(lastStageZone.Substring(lastStageZone.IndexOf("_") + 1)),
								Probability = invalid.Value<JArray>("normal_prob")[0].ToObject<int>(),
								Quantity = invalid.Value<JArray>("normal_num")[0].ToObject<int>(),
								ProbabilityRare = invalid.Value<JArray>("rare_prob")[0].ToObject<int>(),
								QuantityRare = invalid.Value<JArray>("rare_num")[0].ToObject<int>()
							});
						}
					}
				}
				JObject[] matches = gimmickData.Where(x => x.Value<JArray>("INVALID") != null && x.Value<JArray>("INVALID").Any(y => y.Value<JArray>("items") != null && y.Value<JArray>("items").Any(z => z.ToString() == itemId))).Select(x => x.ToObject<JObject>()).ToArray();
				foreach (JObject match in matches)
				{
					foreach (double[] point in match.Value<JArray>("points").Select(x => x.ToObject<double[]>()))
					{
						string lastStageZone = "";
						double[] lastPointMatch = [];
						double lastDistance = 10000000;
						foreach (KeyValuePair<string, Dictionary<string, double[]>> points in MapAreaPoints)
						{
							foreach (KeyValuePair<string, double[]> pt in points.Value)
							{
								double distance = MeasureDistance(point, pt.Value);
								if (distance < lastDistance)
								{
									lastStageZone = pt.Key;
									lastPointMatch = pt.Value;
									lastDistance = distance;
								}
							}
						}
						JToken invalid = match.Value<JArray>("INVALID").First();
						string stageKey = lastStageZone.Substring(0, lastStageZone.IndexOf("_")).ToUpper();
						if (stageDict.ContainsKey(stageKey))
						{
							item.Sources.Add(new ItemSource()
							{
								Stage = stageDict[stageKey],
								Zone = Convert.ToInt32(lastStageZone.Substring(lastStageZone.IndexOf("_") + 1)),
								Probability = invalid.Value<JArray>("normal_prob")[0].ToObject<int>(),
								Quantity = invalid.Value<JArray>("normal_num")[0].ToObject<int>(),
								ProbabilityRare = invalid.Value<JArray>("rare_prob")[0].ToObject<int>(),
								QuantityRare = invalid.Value<JArray>("rare_num")[0].ToObject<int>()
							});
						}
					}
				}
				foreach (KeyValuePair<string, List<WebToolkitData>> monsterDrop in monsterDrops)
				{
					WebToolkitData[] dropMatches = [..monsterDrop.Value.Where(x => x.Tables.Any(y => y.Items.Any(z => z.ItemId == item.ItemID)))];
					foreach (WebToolkitData dropMatch in dropMatches)
					{
						Item[] itemMatches = dropMatch.Tables.Where(x => x.Items.Any(y => y.ItemId == item.ItemID)).SelectMany(x => x.Items).Where(y => y.ItemId == item.ItemID).ToArray();
						foreach (Item itemMatch in itemMatches)
						{
							item.Sources.Add(new ItemSource()
							{
								MonsterName = monsterDrop.Key,
								Rank = dropMatch.Rank,
								Circumstance = itemMatch.Category,
								Probability = Convert.ToInt32(itemMatch.Chance),
								ProbabilityRare = Convert.ToInt32(itemMatch.Chance),
								Quantity = Convert.ToInt32(itemMatch.Quantity),
								QuantityRare = Convert.ToInt32(itemMatch.Quantity)
							});
						}
					}
				}
				KeyValuePair<string, Tuple<Items, int, int>[]>[] rewardArray = questRewards.Where(x => x.Value.Any(y => y.Item1.ItemID == item.ItemID)).ToArray();
				foreach (KeyValuePair<string, Tuple<Items, int, int>[]> rewardObj in rewardArray)
				{
					item.Sources.AddRange(rewardObj.Value.Where(x => x.Item1.ItemID == item.ItemID)
						.Select(x => new ItemSource()
						{
							QuestName = rewardObj.Key,
							Quantity = x.Item2,
							Probability = x.Item3
						}));
				}
				item.Equipment = [];
				List<JToken> test = armorRecipes.Where(x => x.Value<JObject>("app.user_data.ArmorRecipeData.cData").Value<JArray>("_Item").Select(x => x.ToObject<string>()).Any(x => x == item.ItemID && x != "[0]INVALID" && x != "[1]NONE")).ToList();
				item.Equipment.AddRange(armorRecipes
					.Where(x => x.Value<JObject>("app.user_data.ArmorRecipeData.cData").Value<JArray>("_Item")
						.Select(x => x.ToObject<string>())
						.Any(x => x == item.ItemID && x != "[0]INVALID" && x != "[1]NONE"))
					.Select(x => allArmor.AppUserDataArmorData.Values
							.First(y => y.AppUserDataArmorDataCData.ArmorSeries.Series.AppArmorDefSeriesSerializable.Value == x.Value<JObject>("app.user_data.ArmorRecipeData.cData").Value<string>("_SeriesId")
								&& x.Value<JObject>("app.user_data.ArmorRecipeData.cData").Value<string>("_PartsType") == y.AppUserDataArmorDataCData.PartsType.AppArmorDefArmorPartsSerializable.Value).AppUserDataArmorDataCData.ArmorSeries.Name + " Set")
					.Distinct()
					.Select(x => new ItemEquipment()
					{
						EquipmentName = x,
						EquipmentType = "Armor"
					}));
#pragma warning disable CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
				item.Equipment.AddRange(allWeapons.Where(x => (x.Upgrades.Any(y => !string.IsNullOrEmpty(y.Name) && item.Name.ToUpper().Trim() == y.Name.ToUpper().Trim())) || (x.ForgeMaterials != null && x.ForgeMaterials.Materials.Any(y => !string.IsNullOrEmpty(y.Name) && item.Name.ToUpper().Trim() == y.Name.ToUpper().Trim())))
					.Select(x => new ItemEquipment()
					{
						EquipmentName = x.Name,
						EquipmentType = "Weapon"
					}));
#pragma warning restore CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
				item.Combinations = craftingItems.Select(x => x.Value<JObject>("app.user_data.cItemRecipe.cData"))
					.Where(x => x.Value<JArray>("_Item").Any(y => y.ToString() == item.ItemID) || x.Value<string>("_ResultItem") == item.ItemID)
					.Select(x => new ItemCrafting()
					{
						Number = x.Value<int>("_Num"),
						MaterialA = items.First(y => y.ItemID == x.Value<JArray>("_Item")[0].ToString()).Name,
						MaterialB = x.Value<JArray>("_Item")[1].ToString() == "[1]NONE" ? null : items.First(y => y.ItemID == x.Value<JArray>("_Item")[1].ToString()).Name,
						Result = items.First(y => y.ItemID == x.Value<string>("_ResultItem")).Name
					}).ToList();
				JObject thisItemData = itemData.First(x => x.Value<string>("_ItemId") == item.ItemID);
				item.JPName = itemMsgs.First(x => x.Value<string>("guid") == thisItemData.Value<string>("_RawName")).Value<JArray>("content")[0].ToString();
			}
			return items;
		}

		public static Items[] Fetch()
		{
			List<Items> ret = [];
			JArray rawItems = JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Common\Item\itemData.user.3.json"))!.First().Value<JObject>("app.user_data.ItemData").Value<JArray>("_Values");
			JArray rawItemCrafting = JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Common\Item\ItemRecipe.user.3.json"))!.First().Value<JObject>("app.user_data.cItemRecipe").Value<JArray>("_Values");
			JArray itemNames = JsonConvert.DeserializeObject<JObject>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Text\Excel_Data\Item.msg.23.json"))!.Value<JArray>("entries");
			Dictionary<string, string> refItemMsgs = JsonConvert.DeserializeObject<JObject>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Text\Reference\RefItem.msg.23.json")).Value<JArray>("entries").Where(x => x.Value<string>("name").StartsWith("RefItem_0017"))
				.ToDictionary(x => Convert.ToInt32(string.Join("", x.Value<string>("name").Replace("RefItem_0017", "").Substring(x.Value<string>("name").Replace("RefItem_0017", "").IndexOf("_") + 1).ToUpper().Where(char.IsDigit))).ToString(), x => x.Value<JArray>("content")[1].Value<string>());
			Items[] temp = JsonConvert.DeserializeObject<Items[]>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\items.json"))!;
			Dictionary<string, string> colorDefs = JsonConvert.DeserializeObject<Dictionary<string, string>>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\colorDict.json"));
			Dictionary<string, string> iconDefs = JsonConvert.DeserializeObject<Dictionary<string, string>>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\iconDict.json"));
			foreach (JObject rawItem_Container in rawItems)
			{
				JObject rawItem = rawItem_Container.Value<JObject>("app.user_data.ItemData.cData");
				JArray itemName = itemNames.First(x => x.Value<string>("guid") == rawItem.Value<string>("_RawName")).Value<JArray>("content");
				string itemNameStr = itemName[1].Value<string>();
				if (itemNameStr != "---" && !itemNameStr.StartsWith("<COLOR FF0000>#Rejected#</COLOR>"))
				{
					//REMOVE THIS ONCE WORN PICKAXE GETS USED
					if (itemNameStr != "Worn Pickaxe")
					{
						Items item = new Items()
						{
							ItemID = rawItem.Value<string>("_ItemId"),
							BuyPrice = rawItem.Value<int>("_BuyPrice"),
							SellPrice = rawItem.Value<int>("_SellPrice"),
							Carry = rawItem.Value<int>("_MaxCount"),
							OtCarry = rawItem.Value<int>("_OtomoMax"),
							Rarity = Convert.ToInt32(rawItem.Value<string>("_Rare").Substring(rawItem.Value<string>("_Rare").IndexOf("RARE") + 4)) + 1,
							Name = itemNameStr,
							JPName = itemName[0].Value<string>(),
							Description = itemNames.First(x => x.Value<string>("guid") == rawItem.Value<string>("_RawExplain")).Value<JArray>("content")[1].Value<string>().Replace("\r\n", " "),
							Icon = iconDefs[rawItem.Value<string>("_IconType")],
							IconColor = colorDefs[rawItem.Value<string>("_IconColor")],
							Category = refItemMsgs[string.Join("", rawItem.Value<string>("_Type").Where(x => char.IsDigit(x)))]
						};
						ret.Add(item);
					}
				}
			}
			return [.. ret];
		}

		private static double MeasureDistance(double[] src, double[] compare)
		{
			return Math.Sqrt(src.Zip(compare, (a, b) => (a - b) * (a - b)).Sum());
		}
	}

	public class ItemCrafting
	{
		public int Number { get; set; }
		public string Result { get; set; }
		public string MaterialA { get; set; }
		public string MaterialB { get; set; }
	}

	public class ItemEquipment
	{
		public string EquipmentName { get; set; }
		public string EquipmentType { get; set; }
	}

	public class ItemSource
	{
		public string Stage { get; set; }
		public int Zone { get; set; }
		public string MonsterName { get; set; } = string.Empty;
		public string QuestName { get; set; } = string.Empty;
		public int Quantity { get; set; }
		public int Probability { get; set; }
		public int QuantityRare { get; set; }
		public int ProbabilityRare { get; set; }
		public string Rank { get; set; }
		public string Circumstance { get; set; }
	}

	public partial class Items
	{
		public static Items[] FromJson(string json) => JsonConvert.DeserializeObject<Items[]>(json, MediawikiTranslator.Models.Data.MHWilds.Converter.Settings);
	}

	internal static class Converter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}

	internal class ParseStringConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			long l;
			if (Int64.TryParse(value, out l))
			{
				return l;
			}
			throw new Exception("Cannot unmarshal type long");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (long)untypedValue;
			serializer.Serialize(writer, value.ToString());
			return;
		}

		public static readonly ParseStringConverter Singleton = new ParseStringConverter();
	}
}
