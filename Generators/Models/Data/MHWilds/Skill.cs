// <auto-generated />
using System.Diagnostics;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
namespace MediawikiTranslator.Models.Data.MHWilds
{
	public partial class Skill
	{
		public string SkillId { get; set; }
		public string SkillName { get; set; }
		public string SkillExplain { get; set; }
		public string SkillCategory { get; set; }
		public string SkillType { get; set; }
		public string SkillIconType { get; set; }
		public int SortId { get; set; }
		public Dictionary<int, string> SkillLevels { get; set; } = [];
		public Dictionary<int, string> SetSkillLevelNames { get; set; } = [];
#nullable enable
		public string[]? GrantedByMeals { get; set; } = null;
		public string[]? GrantedByIngredients { get; set; } = null;
		public string[]? GrantedByMeals_Daily { get; set; } = null;
		public string[]? GrantedByIngredients_Daily { get; set; } = null;
		public List<Tuple<string, int>>? GrantedByMeals_Chance { get; set; } = null;
		public List<Tuple<string, int>>? GrantedByIngredients_Chance { get; set; } = null;
#nullable disable

		public static Skill[] GetSkills()
		{
			List<Skill> ret = [];
			dynamic[] oldSkillDict = JsonConvert.DeserializeObject<dynamic[]>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\skillDict.json"));
			Items[] allItems = Items.Fetch();
			JArray skillMsgs = JsonConvert.DeserializeObject<JObject>(File.ReadAllText("D:\\MH_Data Repo\\MH_Data\\Parsed Files\\MHWilds\\dtlnor rips\\MHWs-in-json-main\\natives\\STM\\GameDesign\\Text\\Excel_Equip\\Skill.msg.23.json"))!.Value<JArray>("entries")!;
			JArray skillCommonMsgs = JsonConvert.DeserializeObject<JObject>(File.ReadAllText("D:\\MH_Data Repo\\MH_Data\\Parsed Files\\MHWilds\\dtlnor rips\\MHWs-in-json-main\\natives\\STM\\GameDesign\\Text\\Excel_Equip\\SkillCommon.msg.23.json"))!.Value<JArray>("entries")!;
			JArray mealSkillMsgs = JsonConvert.DeserializeObject<JObject>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Text\Excel_Equip\MealSkill.msg.23.json"))!.Value<JArray>("entries")!;
			JArray mealLobbyMsgs = JsonConvert.DeserializeObject<JObject>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Text\Excel_Data\MealLobby.msg.23.json"))!.Value<JArray>("entries")!;
			JArray src = JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Common\Equip\SkillData.user.3.json"))!.First().Value<JObject>("app.user_data.SkillData").Value<JArray>("_Values");
			JArray srcCommon = JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Common\Equip\SkillCommonData.user.3.json"))!.First().Value<JObject>("app.user_data.SkillCommonData").Value<JArray>("_Values");
			JArray mealSkills = JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Common\Facility\MealSkillData.user.3.json"))!.First().Value<JObject>("app.user_data.MealSkillData").Value<JArray>("_Values");
			JArray foodData = [.. JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Facility\FoodData.user.3.json"))!.First().Value<JObject>("app.user_data.FoodData").Value<JArray>("_Values").Select(x => x.Value<JObject>("app.user_data.FoodData.cData"))];
			JArray mealDataLobby = [.. JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Facility\MealDataLobby.user.3.json"))!.First().Value<JObject>("app.user_data.MealDataLobby").Value<JArray>("_Values").Select(x => x.Value<JObject>("app.user_data.MealDataLobby.cData"))];
			JObject[] mealSkillRandomTable = [..JsonConvert.DeserializeObject<JArray>(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWilds\dtlnor rips\MHWs-in-json-main\natives\STM\GameDesign\Facility\MealSkillRandomTable.user.3.json"))!.First().Value<JObject>("app.user_data.MealSkillRandomTable").Value<JArray>("_Values").Select(x => x.Value<JObject>("app.user_data.MealSkillRandomTable.cData"))];
			Dictionary<string, string> iconTypes = [];
			foreach (JObject valContainer in srcCommon)
			{
				JObject val = valContainer.Value<JObject>("app.user_data.SkillCommonData.cData");
				if (val.Value<string>("_skillId") != "[0]NONE")
				{
					string[] setOrGroup = ["[1]SERIES", "[2]GROUP"];
					bool isSetOrGroup = setOrGroup.Contains(val.Value<string>("_skillCategory"));
					Skill newSkill = new()
					{
						SkillId = val.Value<string>("_skillId"),
						SkillType = val.Value<string>("_skillType"),
						SkillCategory = val.Value<string>("_skillCategory"),
						SkillName = skillCommonMsgs.First(x => x.Value<string>("guid") == val.Value<string>("_skillName")).Value<JArray>("content")[1].Value<string>().Replace("\r\n", " "),
						SkillExplain = !isSetOrGroup ? skillCommonMsgs.First(x => x.Value<string>("guid") == val.Value<string>("_skillExplain")).Value<JArray>("content")[1].Value<string>().Replace("\r\n", " ") : null,
						SortId = val.Value<int>("_SortId")
					};
					string iconKey = val.Value<string>("_SkillIconType");
					if (iconTypes.ContainsKey(iconKey))
					{
						newSkill.SkillIconType = iconTypes[iconKey];
					}
					else if (oldSkillDict.Any(x => x.name == newSkill.SkillName))
					{
						string iconType = oldSkillDict.First(x => x.name == newSkill.SkillName)._SkillIconType;
						newSkill.SkillIconType = iconType;
						iconTypes.Add(iconKey, iconType);
					}
					else
					{
						Debugger.Break();
					}
					JToken[] levels = src.Where(x => x.Value<JObject>("app.user_data.SkillData.cData").Value<string>("_skillId") == newSkill.SkillId).ToArray();
					foreach (JToken levelContainer in levels)
					{
						JObject level = levelContainer.Value<JObject>("app.user_data.SkillData.cData");
						int levelVal = level.Value<int>("_SkillLv");
						newSkill.SkillLevels.Add(levelVal, skillMsgs.First(x => x.Value<string>("guid") == level.Value<string>("_skillExplain")).Value<JArray>("content")[1].Value<string>().Replace("\r\n", " "));
						if (isSetOrGroup)
						{
							newSkill.SetSkillLevelNames.Add(levelVal, skillMsgs.First(x => x.Value<string>("guid") == level.Value<string>("_skillName")).Value<JArray>("content")[1].Value<string>().Replace("\r\n", " "));
						}
					}
					ret.Add(newSkill);
				}
			}
			Dictionary<string, string[]> mealRandTables = mealSkillRandomTable.Select(x => x.Value<string>("_RandomTable")).Distinct()
				.ToDictionary(x => x, x => mealSkillRandomTable.Where(y => y.Value<string>("_RandomTable") == x).Select(y => y.Value<string>("_MealSkill")).ToArray());
			foreach (JObject valContainer in mealSkills)
			{
				JObject val = valContainer.Value<JObject>("app.user_data.MealSkillData.cData"); Skill newSkill = new()
				{
					SkillId = val.Value<string>("_MealSkill"),
					SkillType = null,
					SkillCategory = "Meal",
					SkillName = mealSkillMsgs.First(x => x.Value<string>("guid") == val.Value<string>("_Name")).Value<JArray>("content")[1].Value<string>().Replace("\r\n", " "),
					SkillExplain = mealSkillMsgs.First(x => x.Value<string>("guid") == val.Value<string>("_Explain")).Value<JArray>("content")[1].Value<string>().Replace("\r\n", " "),
					SortId = val.Value<int>("_SortId")
				};
				string[] tablesWithSkill = [.. mealRandTables.Where(x => x.Value.Contains(newSkill.SkillId)).Select(x => x.Key)];
				newSkill.GrantedByIngredients = [..foodData.Where(x => x.Value<string>("_MealSkill") == newSkill.SkillId).Select(x => allItems.First(y => y.ItemID == x.Value<string>("_ItemId")).Name)];
				newSkill.GrantedByIngredients_Daily = [..foodData
					.Where(x => x.Value<JArray>("_RandomTable").Select(x => x.Value<string>()).Any(y => tablesWithSkill.Any(z => z == y)))
					.Select(x => allItems.First(y => y.ItemID == x.Value<string>("_ItemId")).Name)];
				newSkill.GrantedByIngredients_Chance = [..foodData
					.Where(x => x.Value<JArray>("_RandomTable").Select(x => x.Value<string>()).Any(y => tablesWithSkill.Any(z => z == y)))
					.Select(x => new Tuple<string, int>(allItems.First(y => y.ItemID == x.Value<string>("_ItemId")).Name,
						mealSkillRandomTable.First(y => y.Value<string>("_RandomTable") == x.Value<JArray>("_RandomTable").Select(z => z.Value<string>()).First() &&
							y.Value<string>("_MealSkill") == newSkill.SkillId).Value<int>("_RandomValue")))];
				newSkill.GrantedByMeals = [..mealDataLobby
					.Where(x => x.Value<JArray>("_MealSkill").Select(x => x.Value<string>())
					.Contains(newSkill.SkillId))
					.Select(x => mealLobbyMsgs.First(y => y.Value<string>("guid") == x.Value<string>("_Title")).Value<JArray>("content")[1].Value<string>().Replace("\r\n", " "))];
				newSkill.GrantedByMeals_Daily = [..mealDataLobby
					.Where(x => x.Value<JArray>("_RandomTable").Select(x => x.Value<string>()).Any(y => tablesWithSkill.Any(z => z == y)))
					.Select(x => mealLobbyMsgs.First(y => y.Value<string>("guid") == x.Value<string>("_Title")).Value<JArray>("content")[1].Value<string>().Replace("\r\n", " "))];
				newSkill.GrantedByMeals_Chance = [];
				foreach (JObject meal in mealDataLobby.Where(x => x.Value<JArray>("_RandomTable").Select(x => x.Value<string>()).Any(y => tablesWithSkill.Any(z => z == y))))
				{
					string mealName = mealLobbyMsgs.First(y => y.Value<string>("guid") == meal.Value<string>("_Title")).Value<JArray>("content")[1].Value<string>().Replace("\r\n", " ");
					foreach (string randomTable in meal.Value<JArray>("_RandomTable").Select(x => x.Value<string>()))
					{
						int? chance = mealSkillRandomTable.FirstOrDefault(x => x.Value<string>("_RandomTable") == randomTable && x.Value<string>("_MealSkill") == newSkill.SkillId)?.Value<int>("_RandomValue");
						if (chance != null && !newSkill.GrantedByMeals_Chance.Any(x => x.Item1 == mealName && x.Item2 == chance.Value))
						{
							try
							{
								newSkill.GrantedByMeals_Chance.Add(new(mealName, chance.Value));
							}
							catch (Exception)
							{
								Debugger.Break();
							}
						}
					}
				}
				string iconKey = val.Value<string>("_SkillIcon");
				if (iconTypes.ContainsKey(iconKey))
				{
					newSkill.SkillIconType = iconTypes[iconKey];
				}
				else if (oldSkillDict.Any(x => x.name == newSkill.SkillName))
				{
					string iconType = oldSkillDict.First(x => x.name == newSkill.SkillName)._SkillIconType;
					newSkill.SkillIconType = iconType;
					iconTypes.Add(iconKey, iconType);
				}
				else
				{
					Debugger.Break();
				}
				ret.Add(newSkill);
			}
			return [..ret];
		}
	}
}
